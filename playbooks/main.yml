---
- name: 'Reboot the Kubernetes worker nodes'
  hosts: all
  serial: '{{ max_number_of_parallel_jobs }}'
  remote_user: root
  gather_facts: false
  vars_files:
    - ../vars/main.yml
  tasks:
    - name: 'Get the disk pressure status of the node'
      ansible.builtin.shell:
        cmd: 'kubectl get nodes {{ inventory_hostname }} -o jsonpath=''{.status.conditions[?(@.type=="DiskPressure")].status}'''
      register: disk_pressure_status
      changed_when: false
      delegate_to: localhost

    - name: 'Try to release some disk space'
      when: ("true" in disk_pressure_status.stdout) or ("True" in disk_pressure_status.stdout)
      block:
        - name: "Cordon the node"
          kubernetes.core.k8s_drain:
            name: '{{ inventory_hostname }}'
            state: cordon
          delegate_to: localhost

        - name: 'Drain the node'
          kubernetes.core.k8s_drain:
            name: '{{ inventory_hostname }}'
            state: drain
            delete_options:
              delete_emptydir_data: true
              force: true
              ignore_daemonsets: true
              wait_timeout: 30
          delegate_to: localhost

        - name: 'Reboot the node'
          ansible.builtin.reboot:
            reboot_timeout: 1200

        - name: 'Stop the kubelet service'
          ansible.builtin.service:
            name: kubelet
            state: stopped

        - name: 'Stop the docker service'
          ansible.builtin.service:
            name: docker
            state: stopped

        - name: 'Prune the docker system'
          community.docker.docker_prune:
            builder_cache: true
            containers: true
            images: true
            images_filters:
              dangling: false
            networks: true
            volumes: true
            timeout: 300

        - name: 'List all containers on running on the machine'
          ansible.builtin.shell: 'docker ps -aq'
          register: docker_ps
          failed_when: false
          changed_when: false

        - name: 'Remove all containers'
          community.docker.docker_container:
            name: '{{ item }}'
            state: absent
          loop: '{{ docker_ps.stdout_lines }}'
          failed_when: false

        - name: 'List all images on the machine'
          ansible.builtin.shell: 'docker images -aq'
          register: docker_images
          failed_when: false
          changed_when: false

        - name: 'Remove all images'
          community.docker.docker_image:
            name: '{{ item }}'
            state: absent
          loop: '{{ docker_images.stdout_lines }}'
          failed_when: false

        - name: 'Erase all the content within /var/lib/docker'
          ansible.builtin.file:
            path: /var/lib/docker
            state: absent
          failed_when: false

        - name: 'Ensure that /var/lib/docker exists'
          ansible.builtin.file:
            path: /var/lib/docker
            state: directory
          failed_when: false

        - name: 'Start the docker service'
          ansible.builtin.service:
            name: docker
            state: started

        - name: 'Start the kubelet service'
          ansible.builtin.service:
            name: kubelet
            state: started

        - name: 'Restart the docker service to make sure that /var/lib/docker file structure is created properly'
          ansible.builtin.service:
            name: docker
            state: restarted

        - name: 'Uncordon the node'
          kubernetes.core.k8s_drain:
            name: '{{ inventory_hostname }}'
            state: uncordon
          delegate_to: localhost

        - name: 'Wait for the node to be ready'
          kubernetes.core.k8s_info:
            kind: Node
            name: '{{ inventory_hostname }}'
          register: node_info
          until: node_info.resources[0].status.conditions | selectattr('type', 'equalto', 'Ready') | selectattr('status', 'equalto', 'True') | list | count == 1
          retries: 60
          delay: 10
          delegate_to: localhost

        - name: 'Take a break to allow ceph to settle'
          ansible.builtin.pause:
            seconds: 60
